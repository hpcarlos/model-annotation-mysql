<?php

namespace fjf2002\ModelAnnotation;

use Illuminate\Database\Eloquent\Model;
use ReflectionClass;
use Illuminate\Support\Facades\DB;

class Annotation {

    public static function annotateModel(ReflectionClass $class): void {
        /** @var Model $modelInstance */
        $modelInstance = $class->newInstance();
        $table = $modelInstance->getTable();
        $connection = $modelInstance->getConnectionName();

        // echo " $table ".." \n";
        if(strlen($connection) > 0){
          if (!empty(DB::connection($connection)->select("SHOW TABLES LIKE '$table';"))) {
            self::updateAnnotation($class, self::getDocComment($class, $table), $table);
          }
        }else{
          if (!empty(DB::select("SHOW TABLES LIKE '$table';"))) {
            self::updateAnnotation($class, self::getDocComment($class, $table), $table);
          }
        }
    }

    protected static function getDocComment(ReflectionClass $class, string $table): string {
        $indent = " * ";
        $description = '';
        $modelInstance = $class->newInstance();
        $connection = $modelInstance->getConnectionName();

        if(strlen($connection) > 0){
          $fields = DB::connection($connection)->select('DESC ' . $table);
        }else {
          $fields = DB::select('DESC ' . $table);
        }
        $max_size_field = 0;
        $ext = '!---------------------------------------------------------------------------------------------------------------------------------------------------------------';

        foreach ($fields as $field) {
            $type = $field->{'Type'};
            if (1==preg_match('/^int/', $type)) {
                $type = 'int';
            } elseif ($type == 'timestamp') {
                $type = 'int';
            } elseif ($type == 'date') {
                $type = '\DateTime';
            } elseif ($type == 'datetime') {
                $type = '\DateTime';
            } elseif ($type == 'time') {
                $type = '\DateTime';
            } elseif (1==preg_match('/^bigint\b/', $type)) {
                $type = 'string';
            } elseif (1==preg_match('/^enum\b/', $type)) {
                $type = 'string';
            } elseif ($type == 'tinyint(1)') {
                $type = 'boolean';
            } elseif (1==preg_match('/^varchar\b/', $type)) {
                $type = 'string';
            }

            if ($field->{'Null'} === 'YES') {
                $type = "$type|null";
            }

            $default = $field->{'Default'};
            if ('' == $default) {
                $default = 'null';
            }

            $key = $field->{'Key'};
            if ('' == $key) {
                $key = 'nil';
            }

            $remove = strlen($ext) - ($max_size_field - strlen($field->{'Field'}));
            $new_ext = substr($ext, 0, -$remove);
            $new_ext = str_replace('!', ' ', $new_ext);
            $new_ext = str_replace('-', ' ', $new_ext);

            // $description = "$description$indent@property $type \${$field->{'Field'}} Type: {$field->{'Type'}}, Extra: {$field->{'Extra'}}, Default: $default, Key: $key\n";
            $default_value = $default != 'null' ? ", Default: ".$default : '' ;
            $description = $description . "# \${$field->{'Field'}} $new_ext :{$field->{'Type'}} {$default_value} \n"; # Type: {$field->{'data_type'}}\n";
        }

        return $description;
        // "/**\n{$indent}AUTOMATICALLY GENERATED BY " . __NAMESPACE__  . "\n{$indent}\n{$indent}Class {$class->getShortName()}\n$indent\n$description */";
    }

    protected static function updateAnnotation(ReflectionClass $class, string $docComment, string $table_name): void {
      $content = file_get_contents($class->getFileName());
      $exists = (0 !== preg_match_all("/\# == Schema Information\n/s", $content));
      /* If does not exist, we add a placeholder */
      if (!$exists) {
        $content = preg_replace('/<\?(php)?/', "<?php\n# == Schema Information\n# == End schema Information", $content, 1);
      }

      $content = preg_replace("/== Schema Information.*?# == End schema Information/s", "== Schema Information\n#\n# == Table name: $table_name\n#\n{$docComment}#\n# == End schema Information", $content, 1);

      file_put_contents($class->getFileName(), $content);
        // $content = file_get_contents($class->getFileName());
        // $contentAsLines = explode("\n", $content);

        // $contentBeforeDocComment = implode("\n", array_slice($contentAsLines, 0, $class->getStartLine() - 1));
        // if($class->getDocComment() !== FALSE) {
        //     $contentBeforeDocComment = preg_replace('/(\r?\n)?' . preg_quote($class->getDocComment(), '/') . '/', '', $contentBeforeDocComment);
        // }

        // $contentAfterDocComment = implode("\n", array_slice($contentAsLines, $class->getStartLine() - 1));

        // file_put_contents($class->getFileName(), "$contentBeforeDocComment\n$docComment\n$contentAfterDocComment");
    }
}
